digraph "classes_backend" {
rankdir=BT
charset="utf-8"
"backend.model.repositories.BaseRepository" [color="black", fontcolor="black", label=<{BaseRepository|model : Optional[Type[T]]<br ALIGN="LEFT"/>|create(kwargs: dict[str, Any]): T<br ALIGN="LEFT"/>get(ID: PrimaryKey): Optional[T]<br ALIGN="LEFT"/>query_list(kwargs: dict[str, Any]): list[T]<br ALIGN="LEFT"/>query_one(kwargs: dict[str, Any]): Optional[T]<br ALIGN="LEFT"/>update(ID: PrimaryKey, kwargs: dict[str, Any]): Optional[T]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.api.apis.Controller" [color="black", fontcolor="black", label=<{Controller|blueprint : Blueprint<br ALIGN="LEFT"/>entityIDKey<br ALIGN="LEFT"/>entityName : str<br ALIGN="LEFT"/>repository : Type[BaseRepository]<br ALIGN="LEFT"/>|create()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>register_entity(entityName: str, env: Literal['test', 'dev'])<br ALIGN="LEFT"/>register_routes(env: str)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.models.DocumentFlow" [color="black", fontcolor="black", label=<{DocumentFlow|documentID<br ALIGN="LEFT"/>goodsReceiptID<br ALIGN="LEFT"/>purchaseOrderID<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.DocumentFlowController" [color="black", fontcolor="black", label=<{DocumentFlowController|<br ALIGN="LEFT"/>|register_routes(env: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.repositories.DocumentFlowRepository" [color="black", fontcolor="black", label=<{DocumentFlowRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.models.GoodsReceipt" [color="black", fontcolor="black", label=<{GoodsReceipt|batch<br ALIGN="LEFT"/>documentDate<br ALIGN="LEFT"/>goodsReceiptID<br ALIGN="LEFT"/>materialID<br ALIGN="LEFT"/>movementType<br ALIGN="LEFT"/>plant<br ALIGN="LEFT"/>postingDate<br ALIGN="LEFT"/>purchaseOrderID<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>receiptDate<br ALIGN="LEFT"/>stockLocation<br ALIGN="LEFT"/>supplierID<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.GoodsReceiptController" [color="black", fontcolor="black", label=<{GoodsReceiptController|<br ALIGN="LEFT"/>|create()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.repositories.GoodsReceiptRepository" [color="black", fontcolor="black", label=<{GoodsReceiptRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.models.Material" [color="black", fontcolor="black", label=<{Material|availabilityCheck<br ALIGN="LEFT"/>baseUnit<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>division<br ALIGN="LEFT"/>grossWeight<br ALIGN="LEFT"/>loadingGroup<br ALIGN="LEFT"/>lotSize<br ALIGN="LEFT"/>materialGroup<br ALIGN="LEFT"/>materialID<br ALIGN="LEFT"/>materialName<br ALIGN="LEFT"/>minimumLotSize<br ALIGN="LEFT"/>movingPrice<br ALIGN="LEFT"/>mrpController<br ALIGN="LEFT"/>mrpType<br ALIGN="LEFT"/>nettWeight<br ALIGN="LEFT"/>packMaterial<br ALIGN="LEFT"/>plannedDeliveryTime<br ALIGN="LEFT"/>priceUnit<br ALIGN="LEFT"/>standardPrice<br ALIGN="LEFT"/>transportationGroup<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>volume<br ALIGN="LEFT"/>volumeUnit<br ALIGN="LEFT"/>weightUnit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.repositories.MaterialRepository" [color="black", fontcolor="black", label=<{MaterialRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.models.PurchaseOrder" [color="black", fontcolor="black", label=<{PurchaseOrder|currency<br ALIGN="LEFT"/>deliveryDate<br ALIGN="LEFT"/>netPrice<br ALIGN="LEFT"/>orderDate<br ALIGN="LEFT"/>paymentTerms<br ALIGN="LEFT"/>plant<br ALIGN="LEFT"/>purchaseOrderID<br ALIGN="LEFT"/>purchasingGroup<br ALIGN="LEFT"/>purchasingOrganization<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>stockID<br ALIGN="LEFT"/>supplierID<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.PurchaseOrderController" [color="black", fontcolor="black", label=<{PurchaseOrderController|<br ALIGN="LEFT"/>|create()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.repositories.PurchaseOrderRepository" [color="black", fontcolor="black", label=<{PurchaseOrderRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.Response" [color="black", fontcolor="black", label=<{Response|code : int<br ALIGN="LEFT"/>data : ResponseData<br ALIGN="LEFT"/>json<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>|create_success(data: ResponseData)<br ALIGN="LEFT"/>not_found(entity: str)<br ALIGN="LEFT"/>query_success(data: ResponseData)<br ALIGN="LEFT"/>update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.models.Stock" [color="black", fontcolor="black", label=<{Stock|batch<br ALIGN="LEFT"/>companyCode<br ALIGN="LEFT"/>materialID<br ALIGN="LEFT"/>plant<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>specialStockIndicator<br ALIGN="LEFT"/>stockID<br ALIGN="LEFT"/>stockType<br ALIGN="LEFT"/>storageLocation<br ALIGN="LEFT"/>unitOfMeasure<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>valuationType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.repositories.StockRepository" [color="black", fontcolor="black", label=<{StockRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.models.Supplier" [color="black", fontcolor="black", label=<{Supplier|address<br ALIGN="LEFT"/>checkDoubleVoice<br ALIGN="LEFT"/>city<br ALIGN="LEFT"/>clerkName<br ALIGN="LEFT"/>communicationLang<br ALIGN="LEFT"/>companyCode<br ALIGN="LEFT"/>contactInfo<br ALIGN="LEFT"/>country<br ALIGN="LEFT"/>orderCurrency<br ALIGN="LEFT"/>partnerFunctions<br ALIGN="LEFT"/>paymentTerms<br ALIGN="LEFT"/>postalCode<br ALIGN="LEFT"/>purchasingOrg<br ALIGN="LEFT"/>reconciliationAcct<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>streetAddress<br ALIGN="LEFT"/>supplierID<br ALIGN="LEFT"/>supplierName<br ALIGN="LEFT"/>taxNumber<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.model.repositories.SupplierRepository" [color="black", fontcolor="black", label=<{SupplierRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.TestAPP.TestDev" [color="black", fontcolor="black", label=<{TestDev|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_dev_login()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestDocumentFlow" [color="black", fontcolor="black", label=<{TestDocumentFlow|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_display_not_found()<br ALIGN="LEFT"/>test_display_success_finished()<br ALIGN="LEFT"/>test_display_success_unfinished()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestGoodsReceipt" [color="black", fontcolor="black", label=<{TestGoodsReceipt|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_success()<br ALIGN="LEFT"/>test_query_not_found()<br ALIGN="LEFT"/>test_query_success()<br ALIGN="LEFT"/>test_update_not_found()<br ALIGN="LEFT"/>test_update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestMaterial" [color="black", fontcolor="black", label=<{TestMaterial|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_success()<br ALIGN="LEFT"/>test_query_not_found()<br ALIGN="LEFT"/>test_query_success()<br ALIGN="LEFT"/>test_update_not_found()<br ALIGN="LEFT"/>test_update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestPurchaseOrder" [color="black", fontcolor="black", label=<{TestPurchaseOrder|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_success()<br ALIGN="LEFT"/>test_query_not_found()<br ALIGN="LEFT"/>test_query_success()<br ALIGN="LEFT"/>test_update_not_found()<br ALIGN="LEFT"/>test_update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestStock" [color="black", fontcolor="black", label=<{TestStock|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_success()<br ALIGN="LEFT"/>test_query_not_found()<br ALIGN="LEFT"/>test_query_success()<br ALIGN="LEFT"/>test_update_not_found()<br ALIGN="LEFT"/>test_update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestSupplier" [color="black", fontcolor="black", label=<{TestSupplier|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_success()<br ALIGN="LEFT"/>test_query_not_found()<br ALIGN="LEFT"/>test_query_success()<br ALIGN="LEFT"/>test_update_not_found()<br ALIGN="LEFT"/>test_update_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.TestAPP.TestUser" [color="black", fontcolor="black", label=<{TestUser|app<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_change_password_success()<br ALIGN="LEFT"/>test_change_password_wrong()<br ALIGN="LEFT"/>test_login_not_found()<br ALIGN="LEFT"/>test_login_success()<br ALIGN="LEFT"/>test_login_wrong_password()<br ALIGN="LEFT"/>test_register_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.models.User" [color="black", fontcolor="black", label=<{User|password<br ALIGN="LEFT"/>role<br ALIGN="LEFT"/>userID<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.UserController" [color="black", fontcolor="black", label=<{UserController|<br ALIGN="LEFT"/>|change_password()<br ALIGN="LEFT"/>login()<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>register_entity(entityName: str, env: Literal['test', 'dev'])<br ALIGN="LEFT"/>register_routes(env: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.model.repositories.UserRepository" [color="black", fontcolor="black", label=<{UserRepository|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.api.apis.DocumentFlowController" -> "backend.api.apis.Controller" [arrowhead="empty", arrowtail="none"];
"backend.api.apis.GoodsReceiptController" -> "backend.api.apis.Controller" [arrowhead="empty", arrowtail="none"];
"backend.api.apis.PurchaseOrderController" -> "backend.api.apis.Controller" [arrowhead="empty", arrowtail="none"];
"backend.api.apis.UserController" -> "backend.api.apis.Controller" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.DocumentFlowRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.GoodsReceiptRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.MaterialRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.PurchaseOrderRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.StockRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.SupplierRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.repositories.UserRepository" -> "backend.model.repositories.BaseRepository" [arrowhead="empty", arrowtail="none"];
"backend.model.models.DocumentFlow" -> "backend.model.repositories.DocumentFlowRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.GoodsReceipt" -> "backend.model.repositories.GoodsReceiptRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.Material" -> "backend.model.repositories.MaterialRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.PurchaseOrder" -> "backend.model.repositories.PurchaseOrderRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.Stock" -> "backend.model.repositories.StockRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.Supplier" -> "backend.model.repositories.SupplierRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"backend.model.models.User" -> "backend.model.repositories.UserRepository" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
}
